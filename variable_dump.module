<?php

/**
 * Implementation of hook_menu().
 */
function variable_dump_menu() {
  $items = array();
  $items['admin/settings/variable_dump'] = array(
    'title' => 'Variable Dump',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('variable_dump_export_form'),
    'access arguments' => array('administer content types'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/variable_dump/export'] = array(
    'title' => 'Export',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/variable_dump/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('variable_dump_import_form'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Export form.
 */
function variable_dump_export_form($form, &$form_state) {
  $form_values = isset($form_state['values']) ? $form_state['values'] : array();
  $step = isset($form_state['storage']['step']) ? $form_state['storage']['step'] + 1 : 1;
  
  $form['#step'] = $step;
  $form['#prefix'] = t('This form will export variables from your site. The export created by this process can be copied and pasted into an install profile or .install file, or imported into another site. If you leave all options empty, you will get a dump of all the variables on your site.');
  
  switch ($step) {
    case 1: // Select a content type.
      $form['text'] = array(
        '#title' => t('Search text'),
        '#type' => 'textfield',
        '#description' => t('Variable name text to search for, like the name of a module.'),
      );
      $form['operation'] = array(
        '#title' => t('Operation'),
        '#type' => 'radios',
        '#options' => array(
          'starts_with' => t('Starts with'), 
          'contains' => t('Contains'), 
          'ends_with' => t('Ends with')
        ),
        '#description' => t('The type of search to perform.'),
      );
      $form['type'] = array(
        '#title' => t('Type of export'),
        '#type' => 'radios',
        '#options' => array(
          'variable_set' => t('Variable Set'), 
          'array' => t('Array'), 
          'function' => t('Function'), 
          'xml' => t('Patterns XML') 
        ),
        '#default_value' => 'variable_set',
        '#description' => t("Select which way to export the data. 'Variable Set' will create variable_set() commands that can be pasted into install files. 'Array' will create an array of values. 'Function' will create a function that will return the values. 'XML' will return the values in the XML format used in Patterns."),
      );
      $form['function'] = array(
        '#title' => t('Function name'),
        '#type' => 'textfield',
        '#default_value' => '',
        '#description' => t("Optionally specify a function name and choose the option 'Function' above.  If specified, the variables will be exported as an associative array returned by this function name."),
      );
      break;

    case 2: // Display the export macro.
      $form['export'] = variable_dump_export($form_state['values']);
      break;
  }

  if ($step < 2) {  // Omit submit button on the textarea block to display the export data.
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Export'),
    );
  }

  $form['step'] = array(
    '#type' => 'value',
    '#value' => $step,
  );

  return $form;  
}

function variable_dump_export_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['storage']['step'] = $form_state['values']['step'];
}

/**
 * Export the settings.
 */
function variable_dump_export($values) {
  $vars = _variable_dump_get_vars($values['text'], $values['operation']);

  switch ($values['type']) {
    case 'array':
      $export = _variable_dump_export_array($vars);
      break;
    case 'function':
      $export = _variable_dump_export_function($values['function'], $vars);
      break;
    case 'xml':
      $export = _variable_dump_export_xml($vars);
      break;
    default:
      $export = _variable_dump_export($vars);
      break;
  }
  
  $form = array(
    '#title' => t('Export'),
    '#description' => t('Copy this text into an installation profile or .install file to replicate it on another site.'),
    '#type' => 'textarea',
    '#default_value' => $export,
    '#rows' => substr_count($export, "\n") + 1,
  );

  return $form;
}

/**
 * Helper function to export a string of variables in the 'variable_set'
 * format.
 */
function _variable_dump_export($vars) {
  $export = '';

  foreach($vars as $name => $value) {
    $value = var_export($value, true);
    $export .= "variable_set('$name', $value);\n";
  }

  return $export;
}

/**
 * Helper function to generate the export string for a function.
 */
function _variable_dump_export_function($function, $vars) {
  $function = trim(check_plain($function));

  // We only want to indent lines that are already indented once.
  $var_export = str_replace("\n  ", "\n    ", var_export($vars, TRUE));
  // Now we need to indent the last line and add the closing semicolon.
  $var_export = substr($var_export, 0, -1) .'  );';

  // @TODO: add docblock?
  $export = "function $function() {\n";
  $export .= "  return $var_export\n";
  $export .= "}\n";

  return $export;
}

/**
 * Helper function to generate the export string for an array.
 */
function _variable_dump_export_array($vars) {
  // We only want to indent lines that are already indented once.
  $var_export = str_replace("\n  ", "\n    ", var_export($vars, TRUE));
  // Now we need to indent the last line and add the closing semicolon.
  $var_export = substr($var_export, 0, -1) .'  );';

  $export = "$var_export\n";
  return $export;
}

/**
 * Helper function to generate the export string for xml.
 */
function _variable_dump_export_xml($vars) {
  $export = '';
  foreach($vars as $name => $value) {
    if (!is_array($value)) {
      $export .= '<variable name="'.$name . '">' . var_export($value, true) .'</variable>'. "\n";
    }
    else {
      $export .= '<variable name="'.$name . '">'. "\n";
      foreach ($value as $key => $val) {
        if (!is_array($val)) {
          $export .= '  <'.$key . '>' . var_export($val, true) .'</'. $key .'>'. "\n";
        }
        else {
          $export .= '  <'.$key . '>'. "\n";
          foreach ($val as $key2 => $val2) {
            $export .= '    <'.$key2 . '>' . var_export($val2, true) .'</'. $key2 .'>'. "\n";
          }
          $export .= '  </'. $key .'>'. "\n";
        }
      }
      $export .= '</variable>'. "\n";
    }
  }
  
  return $export;
}

/**
 * Helper function to pull all variables based on the settings.
 *
 * @param $text
 *   A string of the text to search for.
 * @param $type
 *   A string containing the type of search to do.  Options are
 *   'contains', 'ends_with', & 'starts_with'.
 */
function _variable_dump_get_vars($text, $type) {
  $vars = array();

  switch ($type) {
    case 'contains':
      $result = db_query("SELECT * FROM {variable} WHERE name LIKE('%$text%') ORDER BY name");
      break;
    case 'ends_with':
      $result = db_query("SELECT * FROM {variable} WHERE name LIKE('%$text') ORDER BY name");
      break;
    default:
      $result = db_query("SELECT * FROM {variable} WHERE name LIKE('$text%') ORDER BY name");
      break;  
  }
  foreach ($result as $row) {
    $vars[$row->name] = unserialize($row->value);
  }

  return $vars;
}

/**
 * Import values from cut & paste.
 */
function variable_dump_import_form($form_state) {
  $form['import'] = array(
    '#type' => 'textarea',
    '#title' => t('Paste import code here'),
    '#description' => t('Import variables dumped from other sites by pasting the code created by the Variable Dump Export into this box. Most variables can be imported this way, but note that the import code is sanitized, so it will not be possible to import variables that contain potentially dangerous characters using this box.'),
    '#required' => TRUE,
    '#rows' => 20,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#submit' => array('variable_dump_import_form_submit'),
    '#validate' => array('variable_dump_import_form_validate'),
  );
  return $form;
}

/**
 * Validate the import.
 */
function variable_dump_import_form_validate(&$form, &$form_state) {
  $import = $form_state['values']['import'];
  $import2 = variable_dump_xss($form_state['values']['import']);
  if ($import != $import2) {
    form_set_error('import', t('There are illegal characters in this import.'));
  }
}

/**
 * Import the values.
 */
function variable_dump_import_form_submit(&$form, &$form_state) {
  $import = variable_dump_xss($form_state['values']['import']);
  ob_start();
  eval($import);
  ob_end_clean();
}

/**
 * Simple filter that allows '=>' to be 
 * preserved in the import text while removing all
 * other tags, needed so our variable_set()
 * arrays can be imported.
 */
function variable_dump_xss($text) {
  $text = filter_xss($text);
  $text = str_replace('=&gt;', '=>', $text);
  return $text;
}